/*
 * PLATEAU.Snap.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Synesthesias.PLATEAU.Snap.Generated.Client.FileParameter;
using OpenAPIDateConverter = Synesthesias.PLATEAU.Snap.Generated.Client.OpenAPIDateConverter;

namespace Synesthesias.PLATEAU.Snap.Generated.Model
{
    /// <summary>
    /// Surface
    /// </summary>
    [DataContract(Name = "Surface")]
    public partial class Surface
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Surface" /> class.
        /// </summary>
        /// <param name="gmlid">gmlid.</param>
        /// <param name="coordinates">coordinates.</param>
        public Surface(string gmlid = default(string), List<List<List<double>>> coordinates = default(List<List<List<double>>>))
        {
            this.Gmlid = gmlid;
            this.Coordinates = coordinates;
        }

        /// <summary>
        /// Gets or Sets Gmlid
        /// </summary>
        [DataMember(Name = "gmlid", EmitDefaultValue = true)]
        public string Gmlid { get; set; }

        /// <summary>
        /// Gets or Sets Coordinates
        /// </summary>
        [DataMember(Name = "coordinates", EmitDefaultValue = true)]
        public List<List<List<double>>> Coordinates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Surface {\n");
            sb.Append("  Gmlid: ").Append(Gmlid).Append("\n");
            sb.Append("  Coordinates: ").Append(Coordinates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
