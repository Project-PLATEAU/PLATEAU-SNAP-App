/*
 * PLATEAU.Snap.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using FileParameter = Synesthesias.PLATEAU.Snap.Generated.Client.FileParameter;
using OpenAPIDateConverter = Synesthesias.PLATEAU.Snap.Generated.Client.OpenAPIDateConverter;

namespace Synesthesias.PLATEAU.Snap.Generated.Model
{
    /// <summary>
    /// VisibleSurfacesRequest
    /// </summary>
    [DataContract(Name = "VisibleSurfacesRequest")]
    public partial class VisibleSurfacesRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VisibleSurfacesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected VisibleSurfacesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="VisibleSurfacesRequest" /> class.
        /// </summary>
        /// <param name="from">from (required).</param>
        /// <param name="to">to (required).</param>
        /// <param name="roll">カメラのロール角 (度数法で半時計回りを正とする) (required).</param>
        /// <param name="maxDistance">検出する最大距離 (メートル).</param>
        /// <param name="fieldOfView">カメラの視野角 (度数法).</param>
        public VisibleSurfacesRequest(Coordinate from = default(Coordinate), Coordinate to = default(Coordinate), double roll = default(double), double? maxDistance = default(double?), double? fieldOfView = default(double?))
        {
            // to ensure "from" is required (not null)
            if (from == null)
            {
                throw new ArgumentNullException("from is a required property for VisibleSurfacesRequest and cannot be null");
            }
            this.From = from;
            // to ensure "to" is required (not null)
            if (to == null)
            {
                throw new ArgumentNullException("to is a required property for VisibleSurfacesRequest and cannot be null");
            }
            this.To = to;
            this.Roll = roll;
            this.MaxDistance = maxDistance;
            this.FieldOfView = fieldOfView;
        }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name = "from", IsRequired = true, EmitDefaultValue = true)]
        public Coordinate From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name = "to", IsRequired = true, EmitDefaultValue = true)]
        public Coordinate To { get; set; }

        /// <summary>
        /// カメラのロール角 (度数法で半時計回りを正とする)
        /// </summary>
        /// <value>カメラのロール角 (度数法で半時計回りを正とする)</value>
        [DataMember(Name = "roll", IsRequired = true, EmitDefaultValue = true)]
        public double Roll { get; set; }

        /// <summary>
        /// 検出する最大距離 (メートル)
        /// </summary>
        /// <value>検出する最大距離 (メートル)</value>
        [DataMember(Name = "max_distance", EmitDefaultValue = true)]
        public double? MaxDistance { get; set; }

        /// <summary>
        /// カメラの視野角 (度数法)
        /// </summary>
        /// <value>カメラの視野角 (度数法)</value>
        [DataMember(Name = "field_of_view", EmitDefaultValue = true)]
        public double? FieldOfView { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VisibleSurfacesRequest {\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Roll: ").Append(Roll).Append("\n");
            sb.Append("  MaxDistance: ").Append(MaxDistance).Append("\n");
            sb.Append("  FieldOfView: ").Append(FieldOfView).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

    }

}
