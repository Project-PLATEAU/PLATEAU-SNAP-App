### YamlMime:ManagedReference
items:
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  commentId: T:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  id: Multimap`2
  parent: Synesthesias.PLATEAU.Snap.Generated.Client
  children:
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(Synesthesias.PLATEAU.Snap.Generated.Client.Multimap{`0,`1})
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(`0,`1)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Clear
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.ContainsKey(`0)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo(System.Array,System.Int32)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Count
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.GetEnumerator
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.IsReadOnly
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Item(`0)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Keys
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove(`0)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)
  - Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Values
  langs:
  - csharp
  - vb
  name: Multimap<TKey, TValue>
  nameWithType: Multimap<TKey, TValue>
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>
  type: Class
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Multimap
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 21
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: A dictionary in which one key has many associated values.
  example: []
  syntax:
    content: 'public class Multimap<TKey, TValue> : IDictionary<TKey, IList<TValue>>, ICollection<KeyValuePair<TKey, IList<TValue>>>, IEnumerable<KeyValuePair<TKey, IList<TValue>>>, IEnumerable'
    typeParameters:
    - id: TKey
      description: The type of the key
    - id: TValue
      description: The type of the value associated with the key.
    content.vb: Public Class Multimap(Of TKey, TValue) Implements IDictionary(Of TKey, IList(Of TValue)), ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))), IEnumerable(Of KeyValuePair(Of TKey, IList(Of TValue))), IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: Multimap(Of TKey, TValue)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue)
  name.vb: Multimap(Of TKey, TValue)
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor
  id: '#ctor'
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Multimap()
  nameWithType: Multimap<TKey, TValue>.Multimap()
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Multimap()
  type: Constructor
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: .ctor
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 34
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Empty Constructor.
  example: []
  syntax:
    content: public Multimap()
    content.vb: Public Sub New()
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor*
  nameWithType.vb: Multimap(Of TKey, TValue).New()
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).New()
  name.vb: New()
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Multimap(IEqualityComparer<TKey>)
  nameWithType: Multimap<TKey, TValue>.Multimap(IEqualityComparer<TKey>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Multimap(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: .ctor
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 43
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Constructor with comparer.
  example: []
  syntax:
    content: public Multimap(IEqualityComparer<TKey> comparer)
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: ''
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor*
  nameWithType.vb: Multimap(Of TKey, TValue).New(IEqualityComparer(Of TKey))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).New(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: New(IEqualityComparer(Of TKey))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.GetEnumerator
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.GetEnumerator
  id: GetEnumerator
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: Multimap<TKey, TValue>.GetEnumerator()
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: GetEnumerator
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 56
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: To get the enumerator.
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, IList<TValue>>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
      description: Enumerator
    content.vb: Public Function GetEnumerator() As IEnumerator(Of KeyValuePair(Of TKey, IList(Of TValue)))
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.GetEnumerator*
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.GetEnumerator
  nameWithType.vb: Multimap(Of TKey, TValue).GetEnumerator()
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).GetEnumerator()
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  id: Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Add(KeyValuePair<TKey, IList<TValue>>)
  nameWithType: Multimap<TKey, TValue>.Add(KeyValuePair<TKey, IList<TValue>>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Add(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Add
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 77
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Add values to Multimap
  example: []
  syntax:
    content: public void Add(KeyValuePair<TKey, IList<TValue>> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}
      description: Key value pair
    content.vb: Public Sub Add(item As KeyValuePair(Of TKey, IList(Of TValue)))
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}})
  nameWithType.vb: Multimap(Of TKey, TValue).Add(KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Add(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: Add(KeyValuePair(Of TKey, IList(Of TValue)))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(Synesthesias.PLATEAU.Snap.Generated.Client.Multimap{`0,`1})
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(Synesthesias.PLATEAU.Snap.Generated.Client.Multimap{`0,`1})
  id: Add(Synesthesias.PLATEAU.Snap.Generated.Client.Multimap{`0,`1})
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Add(Multimap<TKey, TValue>)
  nameWithType: Multimap<TKey, TValue>.Add(Multimap<TKey, TValue>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Add(Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Add
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 87
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Add Multimap to Multimap
  example: []
  syntax:
    content: public void Add(Multimap<TKey, TValue> multimap)
    parameters:
    - id: multimap
      type: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
      description: Multimap
    content.vb: Public Sub Add(multimap As Multimap(Of TKey, TValue))
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add*
  nameWithType.vb: Multimap(Of TKey, TValue).Add(Multimap(Of TKey, TValue))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Add(Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue))
  name.vb: Add(Multimap(Of TKey, TValue))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Clear
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Clear
  id: Clear
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: Multimap<TKey, TValue>.Clear()
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Clear
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 99
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Clear Multimap
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Clear*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Clear
  nameWithType.vb: Multimap(Of TKey, TValue).Clear()
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Clear()
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  id: Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Contains(KeyValuePair<TKey, IList<TValue>>)
  nameWithType: Multimap<TKey, TValue>.Contains(KeyValuePair<TKey, IList<TValue>>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Contains(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Contains
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 110
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Determines whether Multimap contains the specified item.
  example: []
  syntax:
    content: public bool Contains(KeyValuePair<TKey, IList<TValue>> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}
      description: Key value pair
    return:
      type: System.Boolean
      description: true if the Multimap contains the item; otherwise, false.
    content.vb: Public Function Contains(item As KeyValuePair(Of TKey, IList(Of TValue))) As Boolean
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Contains*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Method needs to be implemented
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}})
  nameWithType.vb: Multimap(Of TKey, TValue).Contains(KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Contains(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: Contains(KeyValuePair(Of TKey, IList(Of TValue)))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
  id: CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: CopyTo(KeyValuePair<TKey, IList<TValue>>[], int)
  nameWithType: Multimap<TKey, TValue>.CopyTo(KeyValuePair<TKey, IList<TValue>>[], int)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>[], int)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: CopyTo
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 123
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: >-
    Copy items of the Multimap to an array,
       starting at a particular array index.
  example: []
  syntax:
    content: public void CopyTo(KeyValuePair<TKey, IList<TValue>>[] array, int arrayIndex)
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}[]
      description: >-
        The array that is the destination of the items copied
                from Multimap. The array must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in array at which copying begins.
    content.vb: Public Sub CopyTo(array As KeyValuePair(Of TKey, IList(Of TValue))(), arrayIndex As Integer)
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Method needs to be implemented
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}[],System.Int32)
  nameWithType.vb: Multimap(Of TKey, TValue).CopyTo(KeyValuePair(Of TKey, IList(Of TValue))(), Integer)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, IList(Of TValue))(), Integer)
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  id: Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Remove(KeyValuePair<TKey, IList<TValue>>)
  nameWithType: Multimap<TKey, TValue>.Remove(KeyValuePair<TKey, IList<TValue>>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Remove(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Remove
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 134
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Removes the specified item from the Multimap.
  example: []
  syntax:
    content: public bool Remove(KeyValuePair<TKey, IList<TValue>> item)
    parameters:
    - id: item
      type: System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}
      description: Key value pair
    return:
      type: System.Boolean
      description: true if the item is successfully removed; otherwise, false.
    content.vb: Public Function Remove(item As KeyValuePair(Of TKey, IList(Of TValue))) As Boolean
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: Method needs to be implemented
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}})
  nameWithType.vb: Multimap(Of TKey, TValue).Remove(KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Remove(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: Remove(KeyValuePair(Of TKey, IList(Of TValue)))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Count
  commentId: P:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Count
  id: Count
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Multimap<TKey, TValue>.Count
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Count
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 142
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Gets the number of items contained in the Multimap.
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Count*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Count
  nameWithType.vb: Multimap(Of TKey, TValue).Count
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Count
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.IsReadOnly
  commentId: P:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.IsReadOnly
  id: IsReadOnly
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: Multimap<TKey, TValue>.IsReadOnly
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.IsReadOnly
  type: Property
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: IsReadOnly
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 147
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Gets a value indicating whether the Multimap is read-only.
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.IsReadOnly*
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.IsReadOnly
  nameWithType.vb: Multimap(Of TKey, TValue).IsReadOnly
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).IsReadOnly
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(`0,System.Collections.Generic.IList{`1})
  id: Add(`0,System.Collections.Generic.IList{`1})
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Add(TKey, IList<TValue>)
  nameWithType: Multimap<TKey, TValue>.Add(TKey, IList<TValue>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Add(TKey, System.Collections.Generic.IList<TValue>)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Add
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 155
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Adds an item with the provided key and value to the Multimap.
  example: []
  syntax:
    content: public void Add(TKey key, IList<TValue> value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the item to add.
    - id: value
      type: System.Collections.Generic.IList{{TValue}}
      description: The object to use as the value of the item to add.
    content.vb: Public Sub Add(key As TKey, value As IList(Of TValue))
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when couldn't add the value to Multimap.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Add({TKey},System.Collections.Generic.IList{{TValue}})
  nameWithType.vb: Multimap(Of TKey, TValue).Add(TKey, IList(Of TValue))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Add(TKey, System.Collections.Generic.IList(Of TValue))
  name.vb: Add(TKey, IList(Of TValue))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.ContainsKey(`0)
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: Multimap<TKey, TValue>.ContainsKey(TKey)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: ContainsKey
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 178
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Determines whether the Multimap contains an item with the specified key.
  example: []
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the Multimap.
    return:
      type: System.Boolean
      description: >-
        true if the Multimap contains an item with
                the key; otherwise, false.
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.ContainsKey*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.ContainsKey({TKey})
  nameWithType.vb: Multimap(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).ContainsKey(TKey)
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove(`0)
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove(`0)
  id: Remove(`0)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  nameWithType: Multimap<TKey, TValue>.Remove(TKey)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Remove
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 188
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Removes item with the specified key from the Multimap.
  example: []
  syntax:
    content: public bool Remove(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the Multimap.
    return:
      type: System.Boolean
      description: true if the item is successfully removed; otherwise, false.
    content.vb: Public Function Remove(key As TKey) As Boolean
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Remove({TKey})
  nameWithType.vb: Multimap(Of TKey, TValue).Remove(TKey)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Remove(TKey)
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.TryGetValue(`0,System.Collections.Generic.IList{`1}@)
  id: TryGetValue(`0,System.Collections.Generic.IList{`1}@)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out IList<TValue>)
  nameWithType: Multimap<TKey, TValue>.TryGetValue(TKey, out IList<TValue>)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.TryGetValue(TKey, out System.Collections.Generic.IList<TValue>)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: TryGetValue
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 202
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Gets the value associated with the specified key.
  example: []
  syntax:
    content: public bool TryGetValue(TKey key, out IList<TValue> value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key whose value to get.
    - id: value
      type: System.Collections.Generic.IList{{TValue}}
      description: >-
        When this method returns, the value associated with the specified key, if the
                key is found; otherwise, the default value for the type of the value parameter.
                This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: >-
        true if the object that implements Multimap contains
               an item with the specified key; otherwise, false.
    content.vb: Public Function TryGetValue(key As TKey, value As IList(Of TValue)) As Boolean
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.TryGetValue*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.TryGetValue({TKey},System.Collections.Generic.IList{{TValue}}@)
  nameWithType.vb: Multimap(Of TKey, TValue).TryGetValue(TKey, IList(Of TValue))
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).TryGetValue(TKey, System.Collections.Generic.IList(Of TValue))
  name.vb: TryGetValue(TKey, IList(Of TValue))
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Item(`0)
  commentId: P:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Item(`0)
  id: Item(`0)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: Multimap<TKey, TValue>.this[TKey]
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: this[]
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 212
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Gets or sets the item with the specified key.
  example: []
  syntax:
    content: public IList<TValue> this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the item to get or set.
    return:
      type: System.Collections.Generic.IList{{TValue}}
      description: The value of the specified key.
    content.vb: Public Default Property this[](key As TKey) As IList(Of TValue)
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Item*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Item({TKey})
  nameWithType.vb: Multimap(Of TKey, TValue).this[](TKey)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Keys
  commentId: P:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Keys
  id: Keys
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: Multimap<TKey, TValue>.Keys
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Keys
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 221
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Gets a System.Collections.Generic.ICollection containing the keys of the Multimap.
  example: []
  syntax:
    content: public ICollection<TKey> Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Keys*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Keys
  nameWithType.vb: Multimap(Of TKey, TValue).Keys
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Keys
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Values
  commentId: P:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Values
  id: Values
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: Multimap<TKey, TValue>.Values
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Values
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 226
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Gets a System.Collections.Generic.ICollection containing the values of the Multimap.
  example: []
  syntax:
    content: public ICollection<IList<TValue>> Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Collections.Generic.IList{{TValue}}}
    content.vb: Public ReadOnly Property Values As ICollection(Of IList(Of TValue))
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Values*
  implements:
  - System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Values
  nameWithType.vb: Multimap(Of TKey, TValue).Values
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Values
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo(System.Array,System.Int32)
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: CopyTo(Array, int)
  nameWithType: Multimap<TKey, TValue>.CopyTo(Array, int)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.CopyTo(System.Array, int)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: CopyTo
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 235
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: >-
    Copy the items of the Multimap to an System.Array,
       starting at a particular System.Array index.
  example: []
  syntax:
    content: public void CopyTo(Array array, int index)
    parameters:
    - id: array
      type: System.Array
      description: >-
        The one-dimensional System.Array that is the destination of the items copied
                from Multimap. The System.Array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in array at which copying begins.
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo*
  nameWithType.vb: Multimap(Of TKey, TValue).CopyTo(Array, Integer)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).CopyTo(System.Array, Integer)
  name.vb: CopyTo(Array, Integer)
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(`0,`1)
  commentId: M:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  nameWithType: Multimap<TKey, TValue>.Add(TKey, TValue)
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
      branch: feature/doc_fx
      repo: https://synesthesias-koichi-inoue@github.com/Synesthesias/PLATEAU-SNAP-App.git
    id: Add
    path: ../SnapForUnity/Assets/Samples/Synesthesias.Snap/Scripts/Generated/Client/Client/Multimap.cs
    startLine: 246
  assemblies:
  - Synesthesias.Snap.Generated.Sample
  namespace: Synesthesias.PLATEAU.Snap.Generated.Client
  summary: Adds an item with the provided key and value to the Multimap.
  example: []
  syntax:
    content: public void Add(TKey key, TValue value)
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the item to add.
    - id: value
      type: '{TValue}'
      description: The object to use as the value of the item to add.
    content.vb: Public Sub Add(key As TKey, value As TValue)
  overload: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Thrown when couldn't add value to Multimap.
  nameWithType.vb: Multimap(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Add(TKey, TValue)
references:
- uid: Synesthesias.PLATEAU.Snap.Generated.Client
  commentId: N:Synesthesias.PLATEAU.Snap.Generated.Client
  href: Synesthesias.html
  name: Synesthesias.PLATEAU.Snap.Generated.Client
  nameWithType: Synesthesias.PLATEAU.Snap.Generated.Client
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client
  spec.csharp:
  - uid: Synesthesias
    name: Synesthesias
    href: Synesthesias.html
  - name: .
  - uid: Synesthesias.PLATEAU
    name: PLATEAU
    href: Synesthesias.PLATEAU.html
  - name: .
  - uid: Synesthesias.PLATEAU.Snap
    name: Snap
    href: Synesthesias.PLATEAU.Snap.html
  - name: .
  - uid: Synesthesias.PLATEAU.Snap.Generated
    name: Generated
    href: Synesthesias.PLATEAU.Snap.Generated.html
  - name: .
  - uid: Synesthesias.PLATEAU.Snap.Generated.Client
    name: Client
    href: Synesthesias.PLATEAU.Snap.Generated.Client.html
  spec.vb:
  - uid: Synesthesias
    name: Synesthesias
    href: Synesthesias.html
  - name: .
  - uid: Synesthesias.PLATEAU
    name: PLATEAU
    href: Synesthesias.PLATEAU.html
  - name: .
  - uid: Synesthesias.PLATEAU.Snap
    name: Snap
    href: Synesthesias.PLATEAU.Snap.html
  - name: .
  - uid: Synesthesias.PLATEAU.Snap.Generated
    name: Generated
    href: Synesthesias.PLATEAU.Snap.Generated.html
  - name: .
  - uid: Synesthesias.PLATEAU.Snap.Generated.Client
    name: Client
    href: Synesthesias.PLATEAU.Snap.Generated.Client.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  commentId: T:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, IList<TValue>>
  nameWithType: IDictionary<TKey, IList<TValue>>
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue))
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue))
  name.vb: IDictionary(Of TKey, IList(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<KeyValuePair<TKey, IList<TValue>>>
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue)))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  commentId: T:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<KeyValuePair<TKey, IList<TValue>>>
  nameWithType: IEnumerable<KeyValuePair<TKey, IList<TValue>>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, IList(Of TValue)))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.ienumerable
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.#ctor
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2__ctor
  name: Multimap
  nameWithType: Multimap<TKey, TValue>.Multimap
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Multimap
  nameWithType.vb: Multimap(Of TKey, TValue).New
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).New
  name.vb: New
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  commentId: T:System.Collections.Generic.IEqualityComparer{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<TKey>
  nameWithType: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IEqualityComparer`1
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
  fullName.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.iequalitycomparer-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.GetEnumerator*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.GetEnumerator
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_GetEnumerator
  name: GetEnumerator
  nameWithType: Multimap<TKey, TValue>.GetEnumerator
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.GetEnumerator
  nameWithType.vb: Multimap(Of TKey, TValue).GetEnumerator
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<KeyValuePair<TKey, IList<TValue>>>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of KeyValuePair(Of TKey, IList(Of TValue))).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<KeyValuePair<TKey, IList<TValue>>>
  nameWithType: IEnumerator<KeyValuePair<TKey, IList<TValue>>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, IList(Of TValue)))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  name: GetEnumerator()
  nameWithType: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  fullName.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerable-1.getenumerator
  - name: (
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ienumerator-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Add
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Add_System_Collections_Generic_KeyValuePair__0_System_Collections_Generic_IList__1___
  name: Add
  nameWithType: Multimap<TKey, TValue>.Add
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Add
  nameWithType.vb: Multimap(Of TKey, TValue).Add
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Add
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(KeyValuePair<TKey, IList<TValue>>)
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.Add(KeyValuePair<TKey, IList<TValue>>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.Add(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).Add(KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).Add(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: Add(KeyValuePair(Of TKey, IList(Of TValue)))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Add(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}
  commentId: T:System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, IList<TValue>>
  nameWithType: KeyValuePair<TKey, IList<TValue>>
  fullName: System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>
  nameWithType.vb: KeyValuePair(Of TKey, IList(Of TValue))
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))
  name.vb: KeyValuePair(Of TKey, IList(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  name: Add(T)
  nameWithType: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  nameWithType.vb: ICollection(Of T).Add(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.add
  - name: (
  - name: T
  - name: )
- uid: System.Collections.Generic.KeyValuePair`2
  commentId: T:System.Collections.Generic.KeyValuePair`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, TValue>
  nameWithType: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  nameWithType.vb: KeyValuePair(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  commentId: T:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
  parent: Synesthesias.PLATEAU.Snap.Generated.Client
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html
  name: Multimap<TKey, TValue>
  nameWithType: Multimap<TKey, TValue>
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>
  nameWithType.vb: Multimap(Of TKey, TValue)
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue)
  name.vb: Multimap(Of TKey, TValue)
  spec.csharp:
  - uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
    name: Multimap
    href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2
    name: Multimap
    href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Clear*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Clear
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Clear
  name: Clear
  nameWithType: Multimap<TKey, TValue>.Clear
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Clear
  nameWithType.vb: Multimap(Of TKey, TValue).Clear
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Clear
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Clear
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.Clear()
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  name: Clear()
  nameWithType: ICollection<T>.Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  nameWithType.vb: ICollection(Of T).Clear()
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.clear
  - name: (
  - name: )
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.notimplementedexception
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Contains*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Contains
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Contains_System_Collections_Generic_KeyValuePair__0_System_Collections_Generic_IList__1___
  name: Contains
  nameWithType: Multimap<TKey, TValue>.Contains
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Contains
  nameWithType.vb: Multimap(Of TKey, TValue).Contains
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Contains
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(KeyValuePair<TKey, IList<TValue>>)
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.Contains(KeyValuePair<TKey, IList<TValue>>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.Contains(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).Contains(KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).Contains(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: Contains(KeyValuePair(Of TKey, IList(Of TValue)))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Contains(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  name: Contains(T)
  nameWithType: ICollection<T>.Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  nameWithType.vb: ICollection(Of T).Contains(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.contains
  - name: (
  - name: T
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.CopyTo
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_CopyTo_System_Collections_Generic_KeyValuePair__0_System_Collections_Generic_IList__1_____System_Int32_
  name: CopyTo
  nameWithType: Multimap<TKey, TValue>.CopyTo
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.CopyTo
  nameWithType.vb: Multimap(Of TKey, TValue).CopyTo
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).CopyTo
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(KeyValuePair<TKey, IList<TValue>>[], int)
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.CopyTo(KeyValuePair<TKey, IList<TValue>>[], int)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>[], int)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).CopyTo(KeyValuePair(Of TKey, IList(Of TValue))(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))(), Integer)
  name.vb: CopyTo(KeyValuePair(Of TKey, IList(Of TValue))(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.CopyTo(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  name: KeyValuePair<TKey, IList<TValue>>[]
  nameWithType: KeyValuePair<TKey, IList<TValue>>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>[]
  nameWithType.vb: KeyValuePair(Of TKey, IList(Of TValue))()
  fullName.vb: System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))()
  name.vb: KeyValuePair(Of TKey, IList(Of TValue))()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: (
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  name: CopyTo(T[], int)
  nameWithType: ICollection<T>.CopyTo(T[], int)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], int)
  nameWithType.vb: ICollection(Of T).CopyTo(T(), Integer)
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), Integer)
  name.vb: CopyTo(T(), Integer)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: '['
  - name: ']'
  - name: ','
  - name: " "
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.copyto
  - name: (
  - name: T
  - name: (
  - name: )
  - name: ','
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Remove
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Remove_System_Collections_Generic_KeyValuePair__0_System_Collections_Generic_IList__1___
  name: Remove
  nameWithType: Multimap<TKey, TValue>.Remove
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Remove
  nameWithType.vb: Multimap(Of TKey, TValue).Remove
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Remove
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}})
  commentId: M:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(KeyValuePair<TKey, IList<TValue>>)
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.Remove(KeyValuePair<TKey, IList<TValue>>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.Remove(System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>)
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).Remove(KeyValuePair(Of TKey, IList(Of TValue)))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).Remove(System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue)))
  name.vb: Remove(KeyValuePair(Of TKey, IList(Of TValue)))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Remove(System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}})
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.keyvaluepair-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
  - name: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  name: Remove(T)
  nameWithType: ICollection<T>.Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  nameWithType.vb: ICollection(Of T).Remove(T)
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.remove
  - name: (
  - name: T
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Count*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Count
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Count
  name: Count
  nameWithType: Multimap<TKey, TValue>.Count
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Count
  nameWithType.vb: Multimap(Of TKey, TValue).Count
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Count
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.Count
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.Count
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.Count
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).Count
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).Count
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.count
  name: Count
  nameWithType: ICollection<T>.Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  nameWithType.vb: ICollection(Of T).Count
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.IsReadOnly*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.IsReadOnly
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_IsReadOnly
  name: IsReadOnly
  nameWithType: Multimap<TKey, TValue>.IsReadOnly
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.IsReadOnly
  nameWithType.vb: Multimap(Of TKey, TValue).IsReadOnly
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).IsReadOnly
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{`0,System.Collections.Generic.IList{`1}}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},System.Collections.Generic.IList{{TValue}}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<KeyValuePair<TKey, IList<TValue>>>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, System.Collections.Generic.IList<TValue>>>.IsReadOnly
  nameWithType.vb: ICollection(Of KeyValuePair(Of TKey, IList(Of TValue))).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, System.Collections.Generic.IList(Of TValue))).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1.isreadonly
  name: IsReadOnly
  nameWithType: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  nameWithType.vb: ICollection(Of T).IsReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.invalidoperationexception
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Add({TKey},System.Collections.Generic.IList{{TValue}})
  commentId: M:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Add(`0,System.Collections.Generic.IList{`1})
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  name: Add(TKey, IList<TValue>)
  nameWithType: IDictionary<TKey, IList<TValue>>.Add(TKey, IList<TValue>)
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.Add(TKey, System.Collections.Generic.IList<TValue>)
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).Add(TKey, IList(Of TValue))
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).Add(TKey, System.Collections.Generic.IList(Of TValue))
  name.vb: Add(TKey, IList(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Add(`0,System.Collections.Generic.IList{`1})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Add(`0,System.Collections.Generic.IList{`1})
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IList{{TValue}}
  commentId: T:System.Collections.Generic.IList{`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<TValue>
  nameWithType: IList<TValue>
  fullName: System.Collections.Generic.IList<TValue>
  nameWithType.vb: IList(Of TValue)
  fullName.vb: System.Collections.Generic.IList(Of TValue)
  name.vb: IList(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  name: Add(TKey, TValue)
  nameWithType: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).Add(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.add
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.ContainsKey*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.ContainsKey
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: Multimap<TKey, TValue>.ContainsKey
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.ContainsKey
  nameWithType.vb: Multimap(Of TKey, TValue).ContainsKey
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).ContainsKey
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.ContainsKey({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, IList<TValue>>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  name: ContainsKey(TKey)
  nameWithType: IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.containskey
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Remove({TKey})
  commentId: M:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Remove(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, IList<TValue>>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  name: Remove(TKey)
  nameWithType: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  nameWithType.vb: IDictionary(Of TKey, TValue).Remove(TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.remove
  - name: (
  - name: TKey
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.TryGetValue*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.TryGetValue
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_TryGetValue__0_System_Collections_Generic_IList__1___
  name: TryGetValue
  nameWithType: Multimap<TKey, TValue>.TryGetValue
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.TryGetValue
  nameWithType.vb: Multimap(Of TKey, TValue).TryGetValue
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).TryGetValue
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.TryGetValue({TKey},System.Collections.Generic.IList{{TValue}}@)
  commentId: M:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.TryGetValue(`0,System.Collections.Generic.IList{`1}@)
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  name: TryGetValue(TKey, out IList<TValue>)
  nameWithType: IDictionary<TKey, IList<TValue>>.TryGetValue(TKey, out IList<TValue>)
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.TryGetValue(TKey, out System.Collections.Generic.IList<TValue>)
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).TryGetValue(TKey, IList(Of TValue))
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).TryGetValue(TKey, System.Collections.Generic.IList(Of TValue))
  name.vb: TryGetValue(TKey, IList(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.TryGetValue(`0,System.Collections.Generic.IList{`1}@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.TryGetValue(`0,System.Collections.Generic.IList{`1}@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  name: TryGetValue(TKey, out TValue)
  nameWithType: IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  nameWithType.vb: IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: TValue
  - name: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.trygetvalue
  - name: (
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Item*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Item
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Item__0_
  name: this
  nameWithType: Multimap<TKey, TValue>.this
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.this
  nameWithType.vb: Multimap(Of TKey, TValue).this[]
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).this[]
  name.vb: this[]
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Item({TKey})
  commentId: P:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Item(`0)
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  name: this[TKey]
  nameWithType: IDictionary<TKey, IList<TValue>>.this[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.this[TKey]
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).this[](TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Item(`0)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  - name: (
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.IDictionary`2.Item(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  name: this[TKey]
  nameWithType: IDictionary<TKey, TValue>.this[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.this[TKey]
  nameWithType.vb: IDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
  spec.csharp:
  - name: this
  - name: '['
  - name: TKey
  - name: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: this[]
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.item
  - name: (
  - name: TKey
  - name: )
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Keys*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Keys
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Keys
  name: Keys
  nameWithType: Multimap<TKey, TValue>.Keys
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Keys
  nameWithType.vb: Multimap(Of TKey, TValue).Keys
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Keys
  commentId: P:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Keys
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.keys
  name: Keys
  nameWithType: IDictionary<TKey, IList<TValue>>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.Keys
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  commentId: T:System.Collections.Generic.ICollection{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<TKey>
  nameWithType: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  nameWithType.vb: ICollection(Of TKey)
  fullName.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - name: TKey
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  commentId: P:System.Collections.Generic.IDictionary`2.Keys
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.keys
  name: Keys
  nameWithType: IDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  nameWithType.vb: IDictionary(Of TKey, TValue).Keys
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Values*
  commentId: Overload:Synesthesias.PLATEAU.Snap.Generated.Client.Multimap`2.Values
  href: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap-2.html#Synesthesias_PLATEAU_Snap_Generated_Client_Multimap_2_Values
  name: Values
  nameWithType: Multimap<TKey, TValue>.Values
  fullName: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap<TKey, TValue>.Values
  nameWithType.vb: Multimap(Of TKey, TValue).Values
  fullName.vb: Synesthesias.PLATEAU.Snap.Generated.Client.Multimap(Of TKey, TValue).Values
- uid: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}.Values
  commentId: P:System.Collections.Generic.IDictionary{`0,System.Collections.Generic.IList{`1}}.Values
  parent: System.Collections.Generic.IDictionary{{TKey},System.Collections.Generic.IList{{TValue}}}
  definition: System.Collections.Generic.IDictionary`2.Values
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.values
  name: Values
  nameWithType: IDictionary<TKey, IList<TValue>>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, System.Collections.Generic.IList<TValue>>.Values
  nameWithType.vb: IDictionary(Of TKey, IList(Of TValue)).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, System.Collections.Generic.IList(Of TValue)).Values
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.IList{{TValue}}}
  commentId: T:System.Collections.Generic.ICollection{System.Collections.Generic.IList{`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  name: ICollection<IList<TValue>>
  nameWithType: ICollection<IList<TValue>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.IList<TValue>>
  nameWithType.vb: ICollection(Of IList(Of TValue))
  fullName.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.IList(Of TValue))
  name.vb: ICollection(Of IList(Of TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: <
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: <
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.icollection-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.IList`1
    name: IList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ilist-1
  - name: (
  - name: Of
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IDictionary`2.Values
  commentId: P:System.Collections.Generic.IDictionary`2.Values
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.idictionary-2.values
  name: Values
  nameWithType: IDictionary<TKey, TValue>.Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  nameWithType.vb: IDictionary(Of TKey, TValue).Values
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.array
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: TValue
  commentId: '!:TValue'
  name: TValue
  nameWithType: TValue
  fullName: TValue
